package org.example.dao;

import org.example.model.User;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class UserDaoImpl implements UserDao{

    // this is our connection to the database:
    Connection connection;

    public UserDaoImpl() {
        // if we had our connection factory, we could get it from that here:
        // Come back to this
    }

    @Override
    public User create(User user) {
        String sql = "insert into users (id, username, password) values (default, ?, ?);";

        try {
            // we pass in a flag that tells JDBC to return the id that was generated:
            PreparedStatement preparedStatement = connection.prepareStatement(sql, PreparedStatement.RETURN_GENERATED_KEYS);
            preparedStatement.setString(1, user.getUsername());
            preparedStatement.setString(2, user.getPassword());

            // we get a count here, because it is an insert
            // number of rows affected:
            int count = preparedStatement.executeUpdate();

            // return the generated id value from the insertion:
            ResultSet resultSet = preparedStatement.getGeneratedKeys();

            if(count == 1) {
                System.out.println("User added successfully");

                // incrementing our result set
                resultSet.next();
                // get the result set value (in this case, that value is the generated id):
                int generatedId = resultSet.getInt(1);

                // return the user with the id that was generated by postgres:
                user.setId(generatedId);
                return user;
            }
        }
        catch (SQLException e) {
            e.printStackTrace();
            System.out.println("Something went wrong with the insertion");
            // TODO: Throw one of our custom exceptions:
        }
        return null;
    }

    @Override
    public User getById(int id) {
        return null;
    }

    @Override
    public User getByUsername(String username) {
        return null;
    }

    @Override
    public User update(User user, int id) {
        return null;
    }

    @Override
    public void delete(int id) {

    }
}
